<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roryverse on roryverse</title>
    <link>http://rorynolan.rbind.io/</link>
    <description>Recent content in roryverse on roryverse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0100</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deaths from COVID-19 are more informative than confirmed cases</title>
      <link>http://rorynolan.rbind.io/2020/03/22/covid19deaths/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/2020/03/22/covid19deaths/</guid>
      <description>&lt;p&gt;So right now the rate of testing for COVID-19 is increasing in many countries. As such, there are many articles and posts that correctly point out that using the number of confirmed cases over time is not a reliable method for tracking the spread of the disease. However, many articles—including &lt;a href=&#34;https://www.ft.com/content/a26fbf7e-48f8-11ea-aeb3-955839e06441&#34;&gt;this one&lt;/a&gt; in the &lt;em&gt;Financial Times&lt;/em&gt;—still use the number of confirmed cases, for lack of something better.&lt;/p&gt;
&lt;div id=&#34;we-should-be-using-deaths-per-capita&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;We should be using deaths per capita&lt;/h1&gt;
&lt;p&gt;First of all, we should be using per capita statistics. For example 100,000 cases in China vs 100,000 cases in Ireland would be very different things, because of what they imply for concentration of cases. Per capita (assuming a billion people in China and 5 million in Ireland), this would mean 1% of people in Ireland have the disease, whereas 0.01% of people in China would; 1 in 100 vs 1 in 10,000. You get the idea, different things. Of course, just using per capita by country, you miss a lot of things too. Most of the cases being in Wuhan is not the same as a more even spread of cases throughout China. You can fix this by dividing by province or county (if you have that level of granularity in your data), but I won’t be doing that here.&lt;/p&gt;
&lt;p&gt;Second, reported deaths from the virus are more reliable than confirmed cases. That’s because the more ill you are, the more likely you are to get a test. The number of people reported to have died of COVID-19 infection will be closer to the true number than the number of people reported to be infected will be to the true number of infected individuals.&lt;/p&gt;
&lt;p&gt;For timelining the virus in a particular country, the &lt;em&gt;Financial Times&lt;/em&gt; article uses days since first confirmed case in that country. In that spirit, I’ll use days since first confirmed death.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The data&lt;/h1&gt;
&lt;p&gt;Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE) has put together a great &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;COVID-19 data repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m about do dive in and show you this data now. Brace yourself, not many countries appear to be on a good trajectory. Social distancing is new (where it exists at all) and due to the long (approximately 2 week) latency period of the virus (&lt;em&gt;latency&lt;/em&gt; is roughly the period between a person encountering the virus and showing symptoms of infection), we probably won’t see the benefit of social distancing in these statistics for at least another week. If by then there’s still no improvement, that would be cause for huge concern. In China, they had more enforced social distancing, whereby households were forbidden to have any visitors at all, no exceptions. They also had a system of food delivery so that people didn’t need to go to supermarkets. I was in a crowded supermarket yesterday in Oakland, California. I’d be surprised if there wasn’t a single transmission in there that day. We’re nowhere near China’s level in the western world, even though it feels that our lives are at standstill. Are we doing &lt;em&gt;enough&lt;/em&gt;? We’ll have a better idea in a few weeks.&lt;/p&gt;
&lt;div id=&#34;all-countries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;All countries&lt;/h2&gt;
&lt;p&gt;I’m going to limit the data to countries with over 10 million people that have reported at least 10 deaths. First up, I’ll just plot all of the countries. I’ll give a table of country codes at the end of this article. For me, the most confusing are DZA (Algeria) and CHE (Switzerland). Note that the data is not cumulative. Each data point is deaths on that day. The lines are colored by how bad the situation is in that country is right now: how many deaths there were there yesterday.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://rorynolan.rbind.io/post/2020-03-21-covid19deaths_files/figure-html/all-countries-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that Spain and Italy are in a really bad way and still showing exponential growth in the number of deaths. This does not bode well for them.&lt;/p&gt;
&lt;p&gt;The other countries are a bit bunched so next I’ll limit the plot to countries with less than 3 deaths per million yesterday.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;countries-with-less-than-3-deaths-per-million-yesterday&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Countries with less than 3 deaths per million yesterday&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://rorynolan.rbind.io/post/2020-03-21-covid19deaths_files/figure-html/lt3-deaths-per-mil-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Belgium, Switzerland, The Netherlands and France are all in exponential growth and near or above 2 deaths per million. They look to be on their way to where Spain is now; Belgium’s rate of increase is particularly alarming and 10 days after their first death, they have more deaths per capita than any other country did at that stage. Interestingly, Iran looks to be turning the corner and lowering its fatalities. We’ll need another week of data to see if they can sustain this.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;countries-with-less-than-1-death-per-million-yesterday&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Countries with less than 1 death per million yesterday&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://rorynolan.rbind.io/post/2020-03-21-covid19deaths_files/figure-html/lt1-death-per-mil-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see Portugal, Denmark and Great Britain rising sharply here. The British prime minister said today he thinks it will be 12 weeks before they see a drop in the number of cases. Social distancing is only coming into effect in Great Britain now and is being widely flouted. It looks like dire times lie ahead there. The Swedish curve looks like the British one with a few days’ lag.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;countries-with-less-than-0.2-deaths-per-million-yesterday&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Countries with less than 0.2 deaths per million yesterday&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://rorynolan.rbind.io/post/2020-03-21-covid19deaths_files/figure-html/lt0.2-death-per-mil-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Japan have managed to keep their deaths low throughout, which is a credit to them, though people are still dying there, so they are by no means out of the woods. China is the only country to have really turned it around. Their deaths are now falling almost as fast as they were rising a few weeks ago. Provided their figures are accurate, they deserve enormous credit for their response (post cover-up) and lessons should be learned from what they did. South Korea has managed to keep its death numbers in a linear regime (growing at constant number of people dying every day). This is also a great achievement, given how nearly every other country is displaying exponential growth. Canada is worrying, similarly Greece and Algeria, who are only getting started. The USA is also in trouble. They are showing slower growth in cases than other places, probably because epicentres like Seattle and New York are being offset by a lot of people living rurally, who are low transmission risk. Make no mistake, the USA is heading for disaster according to this data. They have time to turn it around, but not that much of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Appendix&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;iso3c&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;country&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AFG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AGO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Angola&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ALB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Albania&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Andorra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ARE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;United Arab Emirates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ARG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Argentina&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ARM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Armenia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ATG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Antigua and Barbuda&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AUS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Australia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AUT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Austria&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;AZE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azerbaijan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Belgium&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Benin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BFA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Burkina Faso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BGD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bangladesh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BGR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bulgaria&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BHR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bahrain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BHS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bahamas, The&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BIH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bosnia and Herzegovina&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BLR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Belarus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BOL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bolivia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BRA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Brazil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BRB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Barbados&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BRN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Brunei&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;BTN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bhutan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CAF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Central African Republic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Canada&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CHE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Switzerland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CHL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CHN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;China&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CIV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cote d’Ivoire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CMR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cameroon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;COD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Congo (Kinshasa)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;COG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Congo (Brazzaville)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;COL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Colombia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CPV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cabo Verde&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CPV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cape Verde&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CRI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Costa Rica&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CUB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cuba&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CYP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cyprus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CZE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Czechia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;DEU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Germany&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;DJI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Djibouti&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;DNK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Denmark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;DOM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dominican Republic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;DZA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Algeria&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ECU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ecuador&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;EGY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Egypt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ERI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Eritrea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ESP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Spain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;EST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Estonia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ETH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ethiopia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Finland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FJI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fiji&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FRA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;France&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GAB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Gabon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GBR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;United Kingdom&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GEO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Georgia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GHA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ghana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Guinea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GMB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Gambia, The&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GNQ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Equatorial Guinea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GRC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Greece&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GTM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Guatemala&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;GUY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Guyana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;HND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Honduras&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;HRV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Croatia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;HTI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Haiti&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;HUN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Hungary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;IDN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Indonesia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;IND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;India&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;IRL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ireland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;IRN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Iran&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;IRQ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Iraq&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ISL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Iceland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ISR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Israel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ITA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Italy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;JAM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jamaica&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;JOR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jordan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;JPN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Japan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KAZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kazakhstan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kenya&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KGZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kyrgyzstan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KHM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cambodia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KOR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Korea, South&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;KWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kuwait&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LBN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lebanon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LBR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Liberia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LCA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint Lucia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Liechtenstein&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sri Lanka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LTU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lithuania&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LUX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Luxembourg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LVA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Latvia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MAR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Morocco&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Monaco&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MDA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Moldova&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MDG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Madagascar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MDV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maldives&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MEX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mexico&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MKD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;North Macedonia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MLT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Malta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MNE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Montenegro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MNG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mongolia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MRT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mauritania&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MUS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mauritius&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;MYS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Malaysia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NAM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Namibia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Niger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nigeria&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NIC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nicaragua&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NLD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Netherlands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NOR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Norway&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NPL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nepal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NZL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New Zealand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;OMN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Oman&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PAK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pakistan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Panama&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Peru&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PHL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Philippines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PNG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Papua New Guinea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;POL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Poland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PRT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Portugal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;PRY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Paraguay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;QAT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Qatar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ROU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Romania&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;RUS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Russia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;RWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Rwanda&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saudi Arabia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SDN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sudan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Senegal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SGP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Singapore&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SLV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;El Salvador&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SMR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;San Marino&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SOM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Somalia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SRB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Serbia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SUR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Suriname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SVK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Slovakia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SVN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Slovenia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SWE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sweden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SWZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Eswatini&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SYC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Seychelles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TCD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TGO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Togo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;THA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Thailand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TLS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;East Timor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Trinidad and Tobago&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TUN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Tunisia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TUR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TWN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Taiwan*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TZA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Tanzania&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;UGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Uganda&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;UKR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ukraine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;URY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Uruguay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;USA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;US&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;UZB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Uzbekistan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;VCT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint Vincent and the Grenadines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;VEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Venezuela&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;VNM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Vietnam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ZAF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;South Africa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ZMB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Zambia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ZWE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Zimbabwe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Coping with varying `gcc` versions and capabilities in R packages</title>
      <link>http://rorynolan.rbind.io/2019/06/30/strexgcc/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/2019/06/30/strexgcc/</guid>
      <description>&lt;div id=&#34;the-problem&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The problem&lt;/h1&gt;
&lt;p&gt;I have a package called &lt;code&gt;strex&lt;/code&gt; which is for string manipulation. In this package, I want to take advantage of the regex capabilities of C++11. The reason for this is that in &lt;code&gt;strex&lt;/code&gt;, I find myself needing to do a calculation like&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- list(c(&amp;quot;1,000&amp;quot;, &amp;quot;2,000,000&amp;quot;),
          c(&amp;quot;1&amp;quot;, &amp;quot;50&amp;quot;, &amp;quot;3,455&amp;quot;))
lapply(x, function(x) as.numeric(stringr::str_replace_all(x, &amp;quot;,&amp;quot;, &amp;quot;&amp;quot;)))
#&amp;gt; [[1]]
#&amp;gt; [1] 1e+03 2e+06
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [1]    1   50 3455&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;lapply&lt;/code&gt; like this can be done faster in C++11, so I’d like to have that speedup in my package. The problem is, this requires the regex capabilities of C++11, which are only supported in &lt;code&gt;gcc&lt;/code&gt; &amp;gt;= 4.9. Many people are using an older &lt;code&gt;gcc&lt;/code&gt;, e.g. the still popular Ubuntu 14.04 is on &lt;code&gt;gcc&lt;/code&gt; 4.8. If these people tried to install the &lt;code&gt;strex&lt;/code&gt; which relied on C++11 regex, they’d get a compile error.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-hope&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The hope&lt;/h1&gt;
&lt;p&gt;I wanted to provide the faster option to those with a capable &lt;code&gt;gcc&lt;/code&gt; and the slower &lt;code&gt;lapply&lt;/code&gt; option (which isn’t painfully slow, just a bit slower) to those with an old &lt;code&gt;gcc&lt;/code&gt;. This should all happen inside a seamless &lt;code&gt;install.packages()&lt;/code&gt; call; the user needn’t be bored by all of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The solution&lt;/h1&gt;
&lt;div id=&#34;figuring-out-which-gcc-version-the-user-has&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Figuring out which &lt;code&gt;gcc&lt;/code&gt; version the user has&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; step of package installation needed to do different things depending on the &lt;code&gt;gcc&lt;/code&gt; version. Kevin Ushey’s &lt;code&gt;configure&lt;/code&gt; package (&lt;a href=&#34;https://github.com/kevinushey/configure&#34; class=&#34;uri&#34;&gt;https://github.com/kevinushey/configure&lt;/a&gt;) allows you to use R to configure R packages (normally you have to use shell commands). This was a saviour. To get the &lt;code&gt;gcc&lt;/code&gt; version, I used the &lt;code&gt;processx&lt;/code&gt; package (so I had to add it to &lt;code&gt;Imports&lt;/code&gt; in &lt;code&gt;DESCRIPTION&lt;/code&gt;) to execute the shell command &lt;code&gt;gcc -v&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gcc_version &amp;lt;- function() {
  out &amp;lt;- tryCatch(processx::run(&amp;quot;gcc&amp;quot;, &amp;quot;-v&amp;quot;, stderr_to_stdout = TRUE),
                  error = function(cnd) list(stdout = &amp;quot;&amp;quot;))
  out &amp;lt;- stringr::str_match(out$stdout, &amp;quot;gcc version (\\d+(?:\\.\\d+)*)&amp;quot;)[1, 2]
  if (!is.na(out)) out &amp;lt;- numeric_version(out)
  out
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns the &lt;code&gt;gcc&lt;/code&gt; version if &lt;code&gt;gcc&lt;/code&gt; is installed and &lt;code&gt;NA&lt;/code&gt; otherwise. Then, the statement &lt;code&gt;!is.na(gcc_version()) &amp;amp;&amp;amp; gcc_version() &amp;lt; &amp;quot;4.9&amp;quot;&lt;/code&gt; returns &lt;code&gt;TRUE&lt;/code&gt; if the user’s &lt;code&gt;gcc&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; support C++11 regex and &lt;code&gt;FALSE&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dealing-with-the-gcc-version&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dealing with the &lt;code&gt;gcc&lt;/code&gt; version&lt;/h2&gt;
&lt;p&gt;I decided that the default code in the package would be for people with an up to date &lt;code&gt;gcc&lt;/code&gt; and that the &lt;code&gt;configure&lt;/code&gt; step would make alterations to the code for people with an old &lt;code&gt;gcc&lt;/code&gt;. Hence, for people with an old &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;configure&lt;/code&gt; needed to remove all of the C++ code that required C++ regex and then replace the body of the R function which &lt;code&gt;.Call()&lt;/code&gt;ed that (now removed) C++ code with R code that performed the same function. It took a long time (many days) and a lot of testing on Travis but this was the right strategy and now &lt;code&gt;strex&lt;/code&gt; is installing beautifully with new and old &lt;code&gt;gcc&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The code&lt;/h1&gt;
&lt;p&gt;There’s a little too much code to walk through the steps in this blog post (and the steps are specific to this package), but if you’re curious as to how this was done, first familiarize yourself with Kevin Ushey’s amazing &lt;code&gt;configure&lt;/code&gt; package and then read the configuration steps in &lt;code&gt;strex&lt;/code&gt; at &lt;a href=&#34;https://github.com/rorynolan/strex&#34; class=&#34;uri&#34;&gt;https://github.com/rorynolan/strex&lt;/a&gt;. This includes useful functions like &lt;code&gt;file_replace_R_fun()&lt;/code&gt; to change the body of an R function in a file, &lt;code&gt;file_remove_C_fun()&lt;/code&gt; to remove a C/C++ function from a file and &lt;code&gt;file_remove_matching_lines()&lt;/code&gt; to remove certain lines from a file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post is intended to give people an &lt;em&gt;idea&lt;/em&gt; of how to deal with this type of problem. If &lt;em&gt;you&lt;/em&gt; are struggling with this problem, feel free to contact me; I’m happy to share the limited knowledge that I have.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using R&#39;s set.seed() to set seeds for use in C/C&#43;&#43; (including Rcpp)</title>
      <link>http://rorynolan.rbind.io/2018/09/30/rcsetseed/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/2018/09/30/rcsetseed/</guid>
      <description>&lt;p&gt;In native R, the user sets the seed for random number generation (RNG) with &lt;code&gt;set.seed()&lt;/code&gt;. Random number generators exist in C and C++ too; these need their own seeds, which are not obviously settable by &lt;code&gt;set.seed()&lt;/code&gt;. Good news! It can be done.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(inline, purrr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;rbernoulli&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;rbernoulli&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Base R (or technically the &lt;code&gt;stats&lt;/code&gt; package) provides no &lt;code&gt;rbernoulli()&lt;/code&gt;. It’s a pretty gaping hole in the pantheon of &lt;code&gt;rbeta()&lt;/code&gt;, &lt;code&gt;rbinom()&lt;/code&gt;, &lt;code&gt;rcauchy()&lt;/code&gt;, &lt;code&gt;rchisq()&lt;/code&gt;, &lt;code&gt;rexp()&lt;/code&gt;, &lt;code&gt;rf()&lt;/code&gt;, &lt;code&gt;rgamma()&lt;/code&gt;, etc. Thankfully, Hadley Wickham noticed this and gave us &lt;code&gt;purrr::rbernoulli()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rbernoulli(5, 0.7)
#&amp;gt; [1] FALSE  TRUE  TRUE  TRUE FALSE
set.seed(1)
rbernoulli(5, 0.7)
#&amp;gt; [1] FALSE  TRUE  TRUE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it seems like Hadley managed to get &lt;code&gt;set.seed()&lt;/code&gt; to work with &lt;code&gt;rbernoulli()&lt;/code&gt;. How did he do this? Let’s take a closer look at &lt;code&gt;purrr::rbernoulli()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purrr::rbernoulli
#&amp;gt; function (n, p = 0.5) 
#&amp;gt; {
#&amp;gt;     stats::runif(n) &amp;gt; (1 - p)
#&amp;gt; }
#&amp;gt; &amp;lt;bytecode: 0x7fdc2488f2b0&amp;gt;
#&amp;gt; &amp;lt;environment: namespace:purrr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ah, it seems Hadley just wrapped &lt;code&gt;runif()&lt;/code&gt;; hence, because &lt;code&gt;set.seed()&lt;/code&gt; works with &lt;code&gt;runif()&lt;/code&gt;, it works with his implementation of &lt;code&gt;purrr::rbernoulli()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;c-rng&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;C++ RNG&lt;/h1&gt;
&lt;p&gt;The C++ standard library provides the &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; header file, which includes Bernoulli RNG. Let’s give that a whirl.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cpp_rbernoulli &amp;lt;- rcpp(c(n = &amp;quot;integer&amp;quot;, p = &amp;quot;numeric&amp;quot;, seed = &amp;quot;integer&amp;quot;), &amp;#39;
                       int n_ = as&amp;lt;int&amp;gt;(n), seed_ = as&amp;lt;int&amp;gt;(seed);
                       double p_ = as&amp;lt;double&amp;gt;(p);
                       std::default_random_engine generator(seed_);
                       std::bernoulli_distribution distribution(p_);
                       IntegerVector out(n_);
                       for (std::size_t i = 0; i != n_; ++i) {
                         out[i] = distribution(generator);
                       }
                       return out;
                       &amp;#39;, includes = &amp;quot;#include &amp;lt;random&amp;gt;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cpp_rbernoulli(6, 0.7, seed = 1)
#&amp;gt; [1] 1 0 1 1 0 1
cpp_rbernoulli(6, 0.7, seed = 1)
#&amp;gt; [1] 1 0 1 1 0 1
cpp_rbernoulli(6, 0.7, seed = 2)
#&amp;gt; [1] 1 0 1 0 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so now we have &lt;code&gt;cpp_rbernoulli()&lt;/code&gt; which is working, but the user has to pass the seed as an argument of the function, there’s no option to use &lt;code&gt;set.seed()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get_seed&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;get_seed()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If only there was a &lt;code&gt;get_seed()&lt;/code&gt; function that we could use. Well, here it is!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_seed &amp;lt;- function() {
  sample.int(.Machine$integer.max, 1)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gets a positive number in the unsigned 32-bit integer range (which is always a safe bet for a seed) and it is completely determined by &lt;code&gt;set.seed()&lt;/code&gt;. Therefore, it’s fine to use as a seed itself. Let’s take a look.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
replicate(6, get_seed())
#&amp;gt; [1] 1140350788  312928385  866248189 1909893419  554504146  884616499
set.seed(1)
replicate(6, get_seed())
#&amp;gt; [1] 1140350788  312928385  866248189 1909893419  554504146  884616499
set.seed(2)
replicate(6, get_seed())
#&amp;gt; [1]  794080207  314911494 1906307464  554751325 2010156236  226245929
set.seed(2)
replicate(6, get_seed())
#&amp;gt; [1]  794080207  314911494 1906307464  554751325 2010156236  226245929&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as we can see, setting a seed via &lt;code&gt;set.seed()&lt;/code&gt; determines the seeds that subsequently come out of &lt;code&gt;get_seed()&lt;/code&gt;, so all is well with the world. &lt;code&gt;get_seed()&lt;/code&gt; can now be used to create a version of &lt;code&gt;cpp_rbernoulli()&lt;/code&gt; which uses &lt;code&gt;set.seed()&lt;/code&gt;. For the sake of inflating my own ego, I’ll name this version after myself.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rorybernoulli &amp;lt;- function(n, p) {
  cpp_rbernoulli(n, p, get_seed())
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check that it’s in working order.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rorybernoulli(6, 0.7)
#&amp;gt; [1] 1 1 0 1 0 1
set.seed(1)
rorybernoulli(6, 0.7)
#&amp;gt; [1] 1 1 0 1 0 1
set.seed(2)
rorybernoulli(6, 0.7)
#&amp;gt; [1] 0 1 1 1 1 1
set.seed(2)
rorybernoulli(6, 0.7)
#&amp;gt; [1] 0 1 1 1 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;benchmarking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Benchmarking&lt;/h1&gt;
&lt;p&gt;Lastly, let’s compare the two Bernoulli RNGs that we have now by asking them both to give us a million Bernoulli random numbers with &lt;code&gt;p = 0.5&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bench::mark(purrr::rbernoulli(1e6, p = 0.5),
            rorybernoulli(1e6, p = 0.5),
            check = FALSE)
#&amp;gt; # A tibble: 2 x 6
#&amp;gt;   expression                            min  median `itr/sec` mem_alloc `gc/sec`
#&amp;gt;   &amp;lt;bch:expr&amp;gt;                        &amp;lt;bch:t&amp;gt; &amp;lt;bch:t&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;bch:byt&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 purrr::rbernoulli(1e+06, p = 0.5) 28.28ms 28.67ms      33.7   11.45MB    10.4 
#&amp;gt; 2 rorybernoulli(1e+06, p = 0.5)      8.81ms  9.21ms     105.     3.82MB     8.97&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow, &lt;code&gt;rorybernoulli()&lt;/code&gt; is three times faster! I wasn’t expecting that. Perhaps it’s because there’s a quicker way of generating a Bernoulli random number than by going through a uniform random number (as &lt;code&gt;purrr::rbernoulli()&lt;/code&gt; does). It’s also three times as efficient with memory; the memory and time improvements probably have the same underlying reason. The point of me writing this post was to share this &lt;code&gt;get_seed()&lt;/code&gt; thing with people so that they can use &lt;code&gt;set.seed()&lt;/code&gt; with &lt;code&gt;Rcpp&lt;/code&gt; and the like; &lt;code&gt;purrr::rbernoulli()&lt;/code&gt; was just a cool example of a non-base RNG that popped into my head. Maybe I should submit a pull request to &lt;code&gt;purrr&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ijtiff: An R Package Providing Comprehensive TIFF I/O</title>
      <link>http://rorynolan.rbind.io/publication/ijtiff/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/ijtiff/</guid>
      <description>&lt;p&gt;&lt;code&gt;ijtiff&lt;/code&gt; is available to download for free from &lt;a href=&#34;https://cran.r-project.org/package=ijtiff&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/ropensci/ijtiff&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detecting Protein Aggregation and Interactions in Live Cells: a Guide to Number and Brightness</title>
      <link>http://rorynolan.rbind.io/publication/nbreview/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/nbreview/</guid>
      <description></description>
    </item>
    
    <item>
      <title>nandb — Number and Brightness in R with a Novel Automatic Detrending Algorithm</title>
      <link>http://rorynolan.rbind.io/publication/nandb/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/nandb/</guid>
      <description>&lt;p&gt;&lt;code&gt;nandb&lt;/code&gt; is available to download for free from &lt;a href=&#34;https://cran.r-project.org/package=nandb&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/rorynolan/nandb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>exampletestr - An Easy Start to Unit Testing R Packages</title>
      <link>http://rorynolan.rbind.io/publication/exampletestr/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0100</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/exampletestr/</guid>
      <description>&lt;p&gt;&lt;code&gt;exampletestr&lt;/code&gt; is available to download for free from &lt;a href=&#34;https://cran.r-project.org/package=exampletestr&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/rorynolan/exampletestr&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>autothresholdr: An R Port of the &#39;ImageJ&#39; Plugin &#39;Auto Threshold&#39;</title>
      <link>http://rorynolan.rbind.io/publication/autothresholdr/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/autothresholdr/</guid>
      <description>&lt;p&gt;&lt;code&gt;autothresholdr&lt;/code&gt; is available to download for free from &lt;a href=&#34;https://cran.r-project.org/package=autothresholdr&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/rorynolan/autothresholdr&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>filesstrings: An R Package for File and String Manipulation</title>
      <link>http://rorynolan.rbind.io/publication/filesstrings/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rorynolan.rbind.io/publication/filesstrings/</guid>
      <description>&lt;p&gt;&lt;code&gt;filesstrings&lt;/code&gt; is available to download for free from &lt;a href=&#34;https://cran.r-project.org/package=filesstrings&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/rorynolan/filesstrings&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
